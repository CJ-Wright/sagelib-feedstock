--- a/src/sage/misc/package.py
+++ b/src/sage/misc/package.py
@@ -210,55 +210,11 @@
         sage: list_packages('pip', exclude_pip=True)
         {}
     """
-    if not pkg_types:
-        pkg_types = ('standard', 'optional', 'experimental', 'pip')
-    elif any(pkg_type not in ('standard', 'optional', 'experimental', 'pip') for pkg_type in pkg_types):
-        raise ValueError("Each pkg_type must be one of 'standard', 'optional', 'experimental', 'pip'")
-
-
-    local = opts.pop('local', False)
-    ignore_URLError = opts.pop('ignore_URLError', False)
-    exclude_pip = opts.pop('exclude_pip', False)
-    if opts:
-        raise ValueError("{} are not valid options".format(sorted(opts)))
-
-    installed = installed_packages(exclude_pip)
-
-    pkgs = {}
-    for p in os.listdir(SAGE_PKGS):
-        try:
-            f = open(os.path.join(SAGE_PKGS, p, "type"))
-        except IOError:
-            # Probably an empty directory => ignore
-            continue
-
-        with f:
-            typ = f.read().strip()
-
-        if typ not in pkg_types:
-            continue
-
-        pkg = {'name': p, 'type': typ, 'installed_version': installed.get(p)}
-        pkg['installed'] = pkg['installed_version'] is not None
-
-        if pkg['type'] == 'pip':
-            if exclude_pip:
-                continue
-            if not local:
-                pkg['remote_version'] = pip_remote_version(p, ignore_URLError=ignore_URLError)
-            else:
-                pkg['remote_version'] = None
-        else:
-            # If package-version.txt does not exist, that is an error
-            # in the build system => we just propagate the exception
-            package_filename = os.path.join(SAGE_PKGS, p, "package-version.txt")
-            with open(package_filename) as f:
-                pkg['remote_version'] = f.read().strip()
-            pkg['installed_version'] = installed.get(p)
-
-        pkgs[p] = pkg
-
-    return pkgs
+    # Without https://trac.sagemath.org/ticket/20382 Sage has no way of detecting
+    # which packages are available in this conda environment. This is mostly used
+    # to decide which optional doctests so run, so it is safe to pretend that no
+    # packages are available.
+    return {}
 
 
 def installed_packages(exclude_pip=True):
@@ -279,13 +235,11 @@
 
         :func:`sage.misc.package.list_packages`
     """
-    from sage.env import SAGE_SPKG_INST
-    installed = {}
-    if not exclude_pip:
-        installed.update(pip_installed_packages())
-    # Sage packages should override pip packages (Trac #23997)
-    installed.update(pkgname_split(pkgname) for pkgname in os.listdir(SAGE_SPKG_INST))
-    return installed
+    # Without https://trac.sagemath.org/ticket/20382 Sage has no way of detecting
+    # which packages are available in this conda environment. This is mostly used
+    # to decide which optional doctests so run, so it is safe to pretend that no
+    # packages are installed.
+    return {}
 
 
 def is_package_installed(package, exclude_pip=True):
