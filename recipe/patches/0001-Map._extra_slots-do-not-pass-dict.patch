From 375e40f6f46fd2db9d231dedf53cc59dc5279147 Mon Sep 17 00:00:00 2001
From: Jeroen Demeyer <jdemeyer@cage.ugent.be>
Date: Wed, 13 Dec 2017 16:05:45 +0100
Subject: [PATCH] Map._extra_slots(): do not pass dict

---
 src/sage/categories/action.pyx                     |   9 +-
 src/sage/categories/map.pxd                        |   4 +-
 src/sage/categories/map.pyx                        |  81 ++++++--------
 src/sage/categories/morphism.pyx                   |  12 +--
 src/sage/rings/complex_number.pyx                  |   7 +-
 src/sage/rings/finite_rings/integer_mod.pyx        |   9 +-
 src/sage/rings/finite_rings/residue_field.pyx      |  51 ++++-----
 src/sage/rings/fraction_field_FpT.pyx              |  35 ++++---
 src/sage/rings/morphism.pyx                        |  36 ++++---
 .../number_field_element_quadratic.pyx             | 116 +++++++--------------
 .../rings/number_field/number_field_morphisms.pyx  |  15 +--
 src/sage/rings/padics/CA_template.pxi              |  21 ++--
 src/sage/rings/padics/CR_template.pxi              |  28 ++---
 src/sage/rings/padics/FM_template.pxi              |  22 ++--
 src/sage/rings/padics/FP_template.pxi              |  27 ++---
 src/sage/rings/polynomial/polynomial_element.pyx   |  10 +-
 src/sage/structure/coerce_maps.pyx                 |  43 ++++----
 17 files changed, 251 insertions(+), 275 deletions(-)

diff --git a/src/sage/categories/action.pyx b/src/sage/categories/action.pyx
index 1ac66aad7d..8651260462 100644
--- a/src/sage/categories/action.pyx
+++ b/src/sage/categories/action.pyx
@@ -386,7 +386,7 @@ cdef class ActionEndomorphism(Morphism):
         self._action = action
         self._g = g
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for pickling and copying.
 
@@ -403,9 +403,10 @@ cdef class ActionEndomorphism(Morphism):
             sage: psi(x) == phi(x)
             True
         """
-        _slots['_action'] = self._action
-        _slots['_g'] = self._g
-        return Morphism._extra_slots(self, _slots)
+        slots = Morphism._extra_slots(self)
+        slots['_action'] = self._action
+        slots['_g'] = self._g
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/categories/map.pxd b/src/sage/categories/map.pxd
index 5f2e882e26..32d9c844c9 100644
--- a/src/sage/categories/map.pxd
+++ b/src/sage/categories/map.pxd
@@ -7,8 +7,8 @@ cdef class Map(Element):
     cdef public int _coerce_cost # a rough measure of the cost of using this morphism in the coercion system.
                           # 10 by default, 100 if a DefaultCoercionMorphism, 10000 if inexact.
 
-    cdef _update_slots(self, dict _dict)
-    cdef dict _extra_slots(self, dict _dict)
+    cdef _update_slots(self, dict)
+    cdef dict _extra_slots(self)
 
     # these methods require x is an element of domain, and returns an element with parent codomain
     cpdef Element _call_(self, x)
diff --git a/src/sage/categories/map.pyx b/src/sage/categories/map.pyx
index 7d578ebaaf..dc61d2349a 100644
--- a/src/sage/categories/map.pyx
+++ b/src/sage/categories/map.pyx
@@ -176,7 +176,7 @@ cdef class Map(Element):
         # Element.__copy__ updates the __dict__, but not the slots.
         # Let's do this now, but with strong references.
         out._parent = self.parent() # self._parent might be None
-        out._update_slots(self._extra_slots({}))
+        out._update_slots(self._extra_slots())
         return out
 
     def parent(self):
@@ -364,15 +364,16 @@ cdef class Map(Element):
         self.domain = ConstantFunction(D)
         self._parent = homset.Hom(D, C, self._category_for)
 
-    cdef _update_slots(self, dict _slots):
+    cdef _update_slots(self, dict slots):
         """
-        Auxiliary method, used in pickling and copying.
+        Set various attributes of this map to implement unpickling.
 
         INPUT:
 
-        - A dictionary of slots to be updated.
-          The dictionary must have the keys ``'_domain'`` and ``'_codomain'``,
-          and may have the key ``'_repr_type_str'``.
+        - ``slots`` -- A dictionary of slots to be updated.
+          The dictionary must have the keys ``'_domain'`` and
+          ``'_codomain'``, and may have the keys ``'_repr_type_str'``
+          and ``'_is_coercion'``.
 
         TESTS:
 
@@ -394,21 +395,14 @@ cdef class Map(Element):
         # todo: the following can break during unpickling of complex
         # objects with circular references! In that case, _slots might
         # contain incomplete objects.
-        self.domain = ConstantFunction(_slots['_domain'])
-        self._codomain = _slots['_codomain']
+        self.domain = ConstantFunction(slots['_domain'])
+        self._codomain = slots['_codomain']
         self.codomain = ConstantFunction(self._codomain)
 
-        # Several pickles exist without a _repr_type_str, so
-        # if there is none saved, we just set it to None.
-        if '_repr_type_str' in _slots:
-            self._repr_type_str = _slots['_repr_type_str']
-        else:
-            self._repr_type_str = None
-        # Same for _is_coercion
-        if '_is_coercion' in _slots:
-            self._is_coercion = _slots['_is_coercion']
-        else:
-            self._is_coercion = None
+        # Several pickles exist without the following, so these are
+        # optional
+        self._repr_type_str = slots.get('_repr_type_str')
+        self._is_coercion = slots.get('_is_coercion')
 
     def _update_slots_test(self, _slots):
         """
@@ -430,25 +424,17 @@ cdef class Map(Element):
         """
         self._update_slots(_slots)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
-        Auxiliary method, used in pickling.
-
-        INPUT:
-
-        A dictionary.
-
-        OUTPUT:
-
-        The given dictionary, that is updated by the slots '_domain', '_codomain' and '_repr_type_str'.
+        Return a dict with attributes to pickle and copy this map.
         """
-        _slots['_domain'] = self.domain()
-        _slots['_codomain'] = self._codomain
-        _slots['_is_coercion'] = self._is_coercion
-        _slots['_repr_type_str'] = self._repr_type_str
-        return _slots
+        return dict(
+                _domain=self.domain(),
+                _codomain=self._codomain,
+                _is_coercion=self._is_coercion,
+                _repr_type_str=self._repr_type_str)
 
-    def _extra_slots_test(self, _slots):
+    def _extra_slots_test(self):
         """
         A Python method to test the cdef _extra_slots method.
 
@@ -456,14 +442,13 @@ cdef class Map(Element):
 
             sage: from sage.categories.map import Map
             sage: f = Map(Hom(QQ, ZZ, Rings()))
-            sage: f._extra_slots_test({"bla": 1})
+            sage: f._extra_slots_test()
             {'_codomain': Integer Ring,
              '_domain': Rational Field,
-            '_is_coercion': False,
-             '_repr_type_str': None,
-             'bla': 1}
+             '_is_coercion': False,
+             '_repr_type_str': None}
         """
-        return self._extra_slots(_slots)
+        return self._extra_slots()
 
     def __reduce__(self):
         """
@@ -483,7 +468,7 @@ cdef class Map(Element):
             _dict = self.__dict__
         else:
             _dict = {}
-        return unpickle_map, (type(self), self.parent(), _dict, self._extra_slots({}))
+        return unpickle_map, (type(self), self.parent(), _dict, self._extra_slots())
 
     def _repr_type(self):
         """
@@ -1350,7 +1335,7 @@ cdef class Section(Map):
         Map.__init__(self, Hom(map.codomain(), map.domain(), SetsWithPartialMaps()))
         self._inverse = map    # TODO: Use this attribute somewhere!
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for pickling and copying.
 
@@ -1365,8 +1350,9 @@ cdef class Section(Map):
               From: Multivariate Polynomial Ring in x, y over Rational Field
               To:   Multivariate Polynomial Ring in x, y over Rational Field
         """
-        _slots['_inverse'] = self._inverse
-        return Map._extra_slots(self, _slots)
+        slots = Map._extra_slots(self)
+        slots['_inverse'] = self._inverse
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1576,7 +1562,7 @@ cdef class FormalCompositeMap(Map):
         self.__list = _slots['__list']
         Map._update_slots(self, _slots)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Used in pickling and copying.
 
@@ -1592,8 +1578,9 @@ cdef class FormalCompositeMap(Map):
             sage: m == loads(dumps(m))    # indirect doctest
             True
         """
-        _slots['__list'] = self.__list
-        return Map._extra_slots(self, _slots)
+        slots = Map._extra_slots(self)
+        slots['__list'] = self.__list
+        return slots
 
     def __richcmp__(self, other, int op):
         """
diff --git a/src/sage/categories/morphism.pyx b/src/sage/categories/morphism.pyx
index 16b2d58d46..5f5b5979d4 100644
--- a/src/sage/categories/morphism.pyx
+++ b/src/sage/categories/morphism.pyx
@@ -573,7 +573,7 @@ cdef class SetMorphism(Morphism):
         except Exception:
             raise TypeError("Underlying map %s does not accept additional arguments" % type(self._function))
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         INPUT:
 
@@ -584,16 +584,16 @@ cdef class SetMorphism(Morphism):
         EXAMPLES::
 
             sage: f = sage.categories.morphism.SetMorphism(Hom(ZZ,ZZ, Sets()), operator.__abs__)
-            sage: f._extra_slots_test({"bla":1})
+            sage: f._extra_slots_test()
             {'_codomain': Integer Ring,
              '_domain': Integer Ring,
              '_function': <built-in function __abs__>,
              '_is_coercion': False,
-             '_repr_type_str': None,
-             'bla': 1}
+             '_repr_type_str': None}
         """
-        _slots['_function'] = self._function
-        return Map._extra_slots(self, _slots)
+        slots = Map._extra_slots(self)
+        slots['_function'] = self._function
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/rings/complex_number.pyx b/src/sage/rings/complex_number.pyx
index 133431803b..8d6807e6df 100644
--- a/src/sage/rings/complex_number.pyx
+++ b/src/sage/rings/complex_number.pyx
@@ -2521,7 +2521,7 @@ cdef class RRtoCC(Map):
         self._zero = ComplexNumber(CC, 0)
         self._repr_type_str = "Natural"
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         A helper for pickling and copying.
 
@@ -2543,8 +2543,9 @@ cdef class RRtoCC(Map):
               From: Real Field with 53 bits of precision
               To:   Complex Field with 53 bits of precision
         """
-        _slots['_zero'] = self._zero
-        return Map._extra_slots(self, _slots)
+        slots = Map._extra_slots(self)
+        slots['_zero'] = self._zero
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/rings/finite_rings/integer_mod.pyx b/src/sage/rings/finite_rings/integer_mod.pyx
index 07821d4b8a..dd4342ae9b 100644
--- a/src/sage/rings/finite_rings/integer_mod.pyx
+++ b/src/sage/rings/finite_rings/integer_mod.pyx
@@ -4117,7 +4117,7 @@ cdef class IntegerMod_hom(Morphism):
         self.zero = C._element_constructor_(0)
         self.modulus = C._pyx_order
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for pickling and copying.
 
@@ -4139,9 +4139,10 @@ cdef class IntegerMod_hom(Morphism):
             sage: psi(R15(7))
             2
         """
-        _slots['zero'] = self.zero
-        _slots['modulus'] = self.modulus
-        return Morphism._extra_slots(self, _slots)
+        slots = Morphism._extra_slots(self)
+        slots['zero'] = self.zero
+        slots['modulus'] = self.modulus
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/rings/finite_rings/residue_field.pyx b/src/sage/rings/finite_rings/residue_field.pyx
index ce3d8ac494..6b5458c204 100644
--- a/src/sage/rings/finite_rings/residue_field.pyx
+++ b/src/sage/rings/finite_rings/residue_field.pyx
@@ -836,7 +836,7 @@ cdef class ReductionMap(Map):
         self._repr_type_str = "Partially defined reduction"
         Map.__init__(self, Hom(K, F, SetsWithPartialMaps()))
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -855,14 +855,15 @@ cdef class ReductionMap(Map):
             sage: r(2 + a) == cr(2 + a)
             True
         """
-        _slots['_K'] = self._K
-        _slots['_F'] = self._F
-        _slots['_to_vs'] = self._to_vs
-        _slots['_PBinv'] = self._PBinv
-        _slots['_to_order'] = self._to_order
-        _slots['_PB'] = self._PB
-        _slots['_section'] = self._section
-        return Map._extra_slots(self, _slots)
+        slots = Map._extra_slots(self)
+        slots['_K'] = self._K
+        slots['_F'] = self._F
+        slots['_to_vs'] = self._to_vs
+        slots['_PBinv'] = self._PBinv
+        slots['_to_order'] = self._to_order
+        slots['_PB'] = self._PB
+        slots['_section'] = self._section
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1120,7 +1121,7 @@ cdef class ResidueFieldHomomorphism_global(RingHomomorphism):
         self._repr_type_str = "Reduction"
         RingHomomorphism.__init__(self, Hom(K,F))
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1140,14 +1141,15 @@ cdef class ResidueFieldHomomorphism_global(RingHomomorphism):
             sage: psi(OK.an_element()) == phi(OK.an_element())
             True
         """
-        _slots['_K'] = self._K
-        _slots['_F'] = self._F
-        _slots['_to_vs'] = self._to_vs
-        _slots['_PBinv'] = self._PBinv
-        _slots['_to_order'] = self._to_order
-        _slots['_PB'] = self._PB
-        _slots['_section'] = self._section
-        return RingHomomorphism._extra_slots(self, _slots)
+        slots = RingHomomorphism._extra_slots(self)
+        slots['_K'] = self._K
+        slots['_F'] = self._F
+        slots['_to_vs'] = self._to_vs
+        slots['_PBinv'] = self._PBinv
+        slots['_to_order'] = self._to_order
+        slots['_PB'] = self._PB
+        slots['_section'] = self._section
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1357,7 +1359,7 @@ cdef class LiftingMap(Section):
         self._PB = PB
         Section.__init__(self, reduction)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1375,11 +1377,12 @@ cdef class LiftingMap(Section):
             sage: phi(F.0) == psi(F.0)
             True
         """
-        _slots['_K'] = self._K
-        _slots['_F'] = self._F
-        _slots['_to_order'] = self._to_order
-        _slots['_PB'] = self._PB
-        return Section._extra_slots(self, _slots)
+        slots = Section._extra_slots(self)
+        slots['_K'] = self._K
+        slots['_F'] = self._F
+        slots['_to_order'] = self._to_order
+        slots['_PB'] = self._PB
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/rings/fraction_field_FpT.pyx b/src/sage/rings/fraction_field_FpT.pyx
index 9cd2c08ef2..3abf24368e 100644
--- a/src/sage/rings/fraction_field_FpT.pyx
+++ b/src/sage/rings/fraction_field_FpT.pyx
@@ -1032,7 +1032,7 @@ cdef class Polyring_FpT_coerce(RingHomomorphism):
         RingHomomorphism.__init__(self, R.ring_of_integers().Hom(R))
         self.p = R.base_ring().characteristic()
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1044,8 +1044,9 @@ cdef class Polyring_FpT_coerce(RingHomomorphism):
             sage: f(t^2 + 1)
             t^2 + 1
         """
-        _slots['p'] = self.p
-        return RingHomomorphism._extra_slots(self, _slots)
+        slots = RingHomomorphism._extra_slots(self)
+        slots['p'] = self.p
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1234,7 +1235,7 @@ cdef class FpT_Polyring_section(Section):
         self.p = f.p
         Section.__init__(self, f)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1252,8 +1253,9 @@ cdef class FpT_Polyring_section(Section):
             ...
             ValueError: not integral
         """
-        _slots['p'] = self.p
-        return Section._extra_slots(self, _slots)
+        slots = Section._extra_slots(self)
+        slots['p'] = self.p
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1348,7 +1350,7 @@ cdef class Fp_FpT_coerce(RingHomomorphism):
         RingHomomorphism.__init__(self, R.base_ring().Hom(R))
         self.p = R.base_ring().characteristic()
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1363,8 +1365,9 @@ cdef class Fp_FpT_coerce(RingHomomorphism):
             sage: g(GF(5)(2)) == f(GF(5)(2))
             True
         """
-        _slots['p'] = self.p
-        return RingHomomorphism._extra_slots(self, _slots)
+        slots = RingHomomorphism._extra_slots(self)
+        slots['p'] = self.p
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1535,7 +1538,7 @@ cdef class FpT_Fp_section(Section):
         self.p = f.p
         Section.__init__(self, f)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1559,8 +1562,9 @@ cdef class FpT_Fp_section(Section):
             sage: g(K(0))
             0
         """
-        _slots['p'] = self.p
-        return Section._extra_slots(self, _slots)
+        slots = Section._extra_slots(self)
+        slots['p'] = self.p
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1668,7 +1672,7 @@ cdef class ZZ_FpT_coerce(RingHomomorphism):
         RingHomomorphism.__init__(self, ZZ.Hom(R))
         self.p = R.base_ring().characteristic()
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1685,8 +1689,9 @@ cdef class ZZ_FpT_coerce(RingHomomorphism):
             sage: g(0) == f(0)
             True
         """
-        _slots['p'] = self.p
-        return RingHomomorphism._extra_slots(self, _slots)
+        slots = RingHomomorphism._extra_slots(self)
+        slots['p'] = self.p
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/rings/morphism.pyx b/src/sage/rings/morphism.pyx
index dfc1f18c22..5de60d5ab6 100644
--- a/src/sage/rings/morphism.pyx
+++ b/src/sage/rings/morphism.pyx
@@ -522,7 +522,7 @@ cdef class RingMap_lift(RingMap):
         self.S = _slots['S']
         Morphism._update_slots(self, _slots)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -533,8 +533,9 @@ cdef class RingMap_lift(RingMap):
             sage: g(3) == f(3)
             True
         """
-        _slots['S'] = self.S
-        return Morphism._extra_slots(self, _slots)
+        slots = Morphism._extra_slots(self)
+        slots['S'] = self.S
+        return slots
 
     cpdef _richcmp_(self, other, int op):
         """
@@ -706,7 +707,7 @@ cdef class RingHomomorphism(RingMap):
             self._lift = _slots['_lift']
         Morphism._update_slots(self, _slots)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -721,11 +722,12 @@ cdef class RingHomomorphism(RingMap):
             sage: g(7)
             1
         """
+        slots = Morphism._extra_slots(self)
         try:
-            _slots['_lift'] = self._lift
+            slots['_lift'] = self._lift
         except AttributeError:
             pass
-        return Morphism._extra_slots(self, _slots)
+        return slots
 
     def _composition_(self, right, homset):
         """
@@ -1085,7 +1087,7 @@ cdef class RingHomomorphism_im_gens(RingHomomorphism):
         self.__im_gens = _slots['__im_gens']
         RingHomomorphism._update_slots(self, _slots)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1101,8 +1103,9 @@ cdef class RingHomomorphism_im_gens(RingHomomorphism):
             sage: g(y)
             x + y
         """
-        _slots['__im_gens'] = self.__im_gens
-        return RingHomomorphism._extra_slots(self, _slots)
+        slots = RingHomomorphism._extra_slots(self)
+        slots['__im_gens'] = self.__im_gens
+        return slots
 
     cpdef _richcmp_(self, other, int op):
         r"""
@@ -1381,7 +1384,7 @@ cdef class RingHomomorphism_from_base(RingHomomorphism):
         self.__underlying = _slots['__underlying']
         RingHomomorphism._update_slots(self, _slots)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1408,8 +1411,9 @@ cdef class RingHomomorphism_from_base(RingHomomorphism):
             sage: psi(x*t)
             2*z*t
         """
-        _slots['__underlying'] = self.__underlying
-        return RingHomomorphism._extra_slots(self, _slots)
+        slots = RingHomomorphism._extra_slots(self)
+        slots['__underlying'] = self.__underlying
+        return slots
 
     cpdef _richcmp_(self, other, int op):
         r"""
@@ -1744,7 +1748,7 @@ cdef class RingHomomorphism_from_quotient(RingHomomorphism):
         self.phi = _slots['phi']
         RingHomomorphism._update_slots(self, _slots)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1766,10 +1770,10 @@ cdef class RingHomomorphism_from_quotient(RingHomomorphism):
             False
             sage: psi(a) == phi(a)
             True
-
         """
-        _slots['phi'] = self.phi
-        return RingHomomorphism._extra_slots(self, _slots)
+        slots = RingHomomorphism._extra_slots(self)
+        slots['phi'] = self.phi
+        return slots
 
     def _phi(self):
         """
diff --git a/src/sage/rings/number_field/number_field_element_quadratic.pyx b/src/sage/rings/number_field/number_field_element_quadratic.pyx
index bf13089c00..d2f90afe1e 100644
--- a/src/sage/rings/number_field/number_field_element_quadratic.pyx
+++ b/src/sage/rings/number_field/number_field_element_quadratic.pyx
@@ -2439,14 +2439,28 @@ cdef class OrderElement_quadratic(NumberFieldElement_quadratic):
         R = self.parent()
         return R(_inverse_mod_generic(self, I))
 
+
 cdef class Z_to_quadratic_field_element(Morphism):
     """
     Morphism that coerces from integers to elements of a quadratic number
     field K.
+
+    EXAMPLES::
+
+        sage: K.<a> = QuadraticField(3)
+        sage: phi = K.coerce_map_from(ZZ); phi
+        Natural morphism:
+          From: Integer Ring
+          To:   Number Field in a with defining polynomial x^2 - 3
+        sage: phi(4)
+        4
+        sage: phi(5).parent() is K
+        True
     """
-    cdef NumberFieldElement_quadratic zero_element    # the zero element of K
+    # The zero element of K, lazily initialized
+    cdef NumberFieldElement_quadratic zero_element
 
-    # TODO: implement __cmp__ properly so we can have a loads/dumps doctest
+    # TODO: implement __richcmp__ properly so we can have a loads/dumps doctest
 
     def __init__(self, K):
         """
@@ -2470,41 +2484,6 @@ cdef class Z_to_quadratic_field_element(Morphism):
         """
         import sage.categories.homset
         Morphism.__init__(self, sage.categories.homset.Hom(ZZ, K))
-        self.zero_element = K.zero()
-
-    cdef dict _extra_slots(self, dict _slots):
-        """
-        Helper for pickling and copying.
-
-        TESTS::
-
-            sage: K.<a> = QuadraticField(3)
-            sage: phi = K.coerce_map_from(ZZ) # indirect doctest
-            sage: phi(4)
-            4
-            sage: phi(5).parent() is K
-            True
-
-        """
-        _slots['zero_element'] = self.zero_element
-        return Morphism._extra_slots(self, _slots)
-
-    cdef _update_slots(self, dict _slots):
-        """
-        Helper for pickling and copying.
-
-        TESTS::
-
-            sage: K.<a> = QuadraticField(3)
-            sage: phi = K.coerce_map_from(ZZ) # indirect doctest
-            sage: phi(4)
-            4
-            sage: phi(5).parent() is K
-            True
-
-        """
-        Morphism._update_slots(self, _slots)
-        self.zero_element = _slots['zero_element']
 
     cpdef Element _call_(self, x):
         r"""
@@ -2527,6 +2506,8 @@ cdef class Z_to_quadratic_field_element(Morphism):
             True
         """
         cdef NumberFieldElement_quadratic y
+        if self.zero_element is None:
+            self.zero_element = self._codomain.zero()
         if mpz_sgn((<Integer> x).value) == 0:
             return self.zero_element
         y = self.zero_element._new()
@@ -2560,14 +2541,28 @@ cdef class Z_to_quadratic_field_element(Morphism):
         """
         return "Natural"
 
+
 cdef class Q_to_quadratic_field_element(Morphism):
     """
     Morphism that coerces from rationals to elements of a quadratic number
     field K.
+
+    EXAMPLES::
+
+        sage: K.<a> = QuadraticField(-3)
+        sage: f = K.coerce_map_from(QQ); f
+        Natural morphism:
+          From: Rational Field
+          To:   Number Field in a with defining polynomial x^2 + 3
+        sage: f(3/1)
+        3
+        sage: f(1/2).parent() is K
+        True
     """
-    cdef NumberFieldElement_quadratic zero_element    # the zero element of K
+    # The zero element of K, lazily initialized
+    cdef NumberFieldElement_quadratic zero_element
 
-    # TODO: implement __cmp__ properly so we can have a loads/dumps doctest
+    # TODO: implement __richcmp__ properly so we can have a loads/dumps doctest
 
     def __init__(self, K):
         """
@@ -2591,47 +2586,6 @@ cdef class Q_to_quadratic_field_element(Morphism):
         """
         import sage.categories.homset
         Morphism.__init__(self, sage.categories.homset.Hom(QQ, K))
-        self.zero_element = K.zero()
-
-    cdef dict _extra_slots(self, dict _slots):
-        """
-        Helper for pickling and copying.
-
-        TESTS::
-
-            sage: K.<a> = QuadraticField(-3) ## line 8983 ##
-            sage: f = K.coerce_map_from(QQ); f # indirect doctest
-            Natural morphism:
-              From: Rational Field
-              To:   Number Field in a with defining polynomial x^2 + 3
-            sage: f(3/1)
-            3
-            sage: f(1/2).parent() is K
-            True
-
-        """
-        _slots['zero_element'] = self.zero_element
-        return Morphism._extra_slots(self, _slots)
-
-    cdef _update_slots(self, dict _slots):
-        """
-        Helper for pickling and copying.
-
-        TESTS::
-
-            sage: K.<a> = QuadraticField(-3) ## line 8983 ##
-            sage: f = K.coerce_map_from(QQ); f # indirect doctest
-            Natural morphism:
-              From: Rational Field
-              To:   Number Field in a with defining polynomial x^2 + 3
-            sage: f(3/1)
-            3
-            sage: f(1/2).parent() is K
-            True
-
-        """
-        Morphism._update_slots(self, _slots)
-        self.zero_element = _slots['zero_element']
 
     cpdef Element _call_(self, x):
         r"""
@@ -2653,6 +2607,8 @@ cdef class Q_to_quadratic_field_element(Morphism):
             sage: b.parent() is R
             True
         """
+        if self.zero_element is None:
+            self.zero_element = self._codomain.zero()
         cdef NumberFieldElement_quadratic y = self.zero_element._new()
         mpz_set(y.a, mpq_numref((<Rational>x).value))
         mpz_set(y.denom, mpq_denref((<Rational>x).value))
diff --git a/src/sage/rings/number_field/number_field_morphisms.pyx b/src/sage/rings/number_field/number_field_morphisms.pyx
index 401e89486f..6bc5626c12 100644
--- a/src/sage/rings/number_field/number_field_morphisms.pyx
+++ b/src/sage/rings/number_field/number_field_morphisms.pyx
@@ -65,7 +65,7 @@ cdef class NumberFieldEmbedding(Morphism):
         else:
             self._gen_image = R(gen_embedding)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         A helper for pickling and copying.
 
@@ -92,8 +92,9 @@ cdef class NumberFieldEmbedding(Morphism):
             sage: g(a)^3
             2.00000000000000?
         """
-        _slots['_gen_image'] = self._gen_image
-        return Morphism._extra_slots(self, _slots)
+        slots = Morphism._extra_slots(self)
+        slots['_gen_image'] = self._gen_image
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -620,7 +621,7 @@ cdef class CyclotomicFieldEmbedding(NumberFieldEmbedding):
         self.ratio = L._log_gen(K.coerce_embedding()(K.gen()))
         self._gen_image = L.gen() ** self.ratio
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         A helper for pickling and copying.
 
@@ -647,9 +648,9 @@ cdef class CyclotomicFieldEmbedding(NumberFieldEmbedding):
             sage: g(cf6.0)
             zeta12^2
         """
-        _slots['_gen_image'] = self._gen_image
-        _slots['ratio'] = self.ratio
-        return Morphism._extra_slots(self, _slots)
+        slots = NumberFieldEmbedding._extra_slots(self)
+        slots['ratio'] = self.ratio
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/rings/padics/CA_template.pxi b/src/sage/rings/padics/CA_template.pxi
index 1108e03fcf..d23bf69b31 100644
--- a/src/sage/rings/padics/CA_template.pxi
+++ b/src/sage/rings/padics/CA_template.pxi
@@ -989,7 +989,7 @@ cdef class pAdicCoercion_ZZ_CA(RingHomomorphism):
         self._zero = R.element_class(R, 0)
         self._section = pAdicConvert_CA_ZZ(R)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1004,9 +1004,10 @@ cdef class pAdicCoercion_ZZ_CA(RingHomomorphism):
             sage: f(6) == g(6)
             True
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1182,7 +1183,7 @@ cdef class pAdicConvert_QQ_CA(Morphism):
         Morphism.__init__(self, Hom(QQ, R, SetsWithPartialMaps()))
         self._zero = R.element_class(R, 0)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1197,8 +1198,9 @@ cdef class pAdicConvert_QQ_CA(Morphism):
             sage: g(1/6) == f(1/6)
             True
         """
+        _slots = Morphism._extra_slots(self)
         _slots['_zero'] = self._zero
-        return Morphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1407,7 +1409,7 @@ cdef class pAdicCoercion_CA_frac_field(RingHomomorphism):
             self._section = copy.copy(self._section)
         return self._section
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1431,9 +1433,10 @@ cdef class pAdicCoercion_CA_frac_field(RingHomomorphism):
             True
 
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1599,7 +1602,7 @@ cdef class pAdicConvert_CA_frac_field(Morphism):
             sig_off()
         return ans
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1622,10 +1625,10 @@ cdef class pAdicConvert_CA_frac_field(Morphism):
             a + O(3^20)
             sage: g(a) == f(a)
             True
-
         """
+        _slots = Morphism._extra_slots(self)
         _slots['_zero'] = self._zero
-        return Morphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/rings/padics/CR_template.pxi b/src/sage/rings/padics/CR_template.pxi
index 5c7256a57d..4a40fd1b70 100644
--- a/src/sage/rings/padics/CR_template.pxi
+++ b/src/sage/rings/padics/CR_template.pxi
@@ -1483,7 +1483,7 @@ cdef class pAdicCoercion_ZZ_CR(RingHomomorphism):
         self._zero = R.element_class(R, 0)
         self._section = pAdicConvert_CR_ZZ(R)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1503,11 +1503,11 @@ cdef class pAdicCoercion_ZZ_CR(RingHomomorphism):
             5 + O(5^21)
             sage: g(5) == f(5)
             True
-
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1701,7 +1701,7 @@ cdef class pAdicCoercion_QQ_CR(RingHomomorphism):
         self._zero = R.element_class(R, 0)
         self._section = pAdicConvert_CR_QQ(R)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1721,11 +1721,11 @@ cdef class pAdicCoercion_QQ_CR(RingHomomorphism):
             1 + 5 + O(5^20)
             sage: g(6) == f(6)
             True
-
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1915,7 +1915,7 @@ cdef class pAdicConvert_QQ_CR(Morphism):
         self._zero = R.element_class(R, 0)
         self._section = pAdicConvert_CR_QQ(R)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1930,9 +1930,10 @@ cdef class pAdicConvert_QQ_CR(Morphism):
             sage: g(1/6) == f(1/6)
             True
         """
+        _slots = Morphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return Morphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -2169,7 +2170,7 @@ cdef class pAdicCoercion_CR_frac_field(RingHomomorphism):
             self._section = copy.copy(self._section)
         return self._section
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -2193,9 +2194,10 @@ cdef class pAdicCoercion_CR_frac_field(RingHomomorphism):
             True
 
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -2357,7 +2359,7 @@ cdef class pAdicConvert_CR_frac_field(Morphism):
             cshift(ans.unit, x.unit, 0, rprec, x.prime_pow, reduce)
         return ans
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -2380,10 +2382,10 @@ cdef class pAdicConvert_CR_frac_field(Morphism):
             a + O(3^20)
             sage: g(a) == f(a)
             True
-
         """
+        _slots = Morphism._extra_slots(self)
         _slots['_zero'] = self._zero
-        return Morphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/rings/padics/FM_template.pxi b/src/sage/rings/padics/FM_template.pxi
index ab50aa3472..450ea2f9e8 100644
--- a/src/sage/rings/padics/FM_template.pxi
+++ b/src/sage/rings/padics/FM_template.pxi
@@ -828,7 +828,7 @@ cdef class pAdicCoercion_ZZ_FM(RingHomomorphism):
         self._zero = R.element_class(R, 0)
         self._section = pAdicConvert_FM_ZZ(R)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -843,9 +843,10 @@ cdef class pAdicCoercion_ZZ_FM(RingHomomorphism):
             sage: g(6) == f(6)
             True
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1011,7 +1012,7 @@ cdef class pAdicConvert_QQ_FM(Morphism):
         Morphism.__init__(self, Hom(QQ, R, SetsWithPartialMaps()))
         self._zero = R.element_class(R, 0)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1026,8 +1027,9 @@ cdef class pAdicConvert_QQ_FM(Morphism):
             sage: g(1/6) == f(1/6)
             True
         """
+        _slots = Morphism._extra_slots(self)
         _slots['_zero'] = self._zero
-        return Morphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1221,7 +1223,7 @@ cdef class pAdicCoercion_FM_frac_field(RingHomomorphism):
             self._section = copy.copy(self._section)
         return self._section
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1243,11 +1245,11 @@ cdef class pAdicCoercion_FM_frac_field(RingHomomorphism):
             a
             sage: g(a) == f(a)
             True
-
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1400,7 +1402,7 @@ cdef class pAdicConvert_FM_frac_field(Morphism):
         sig_off()
         return ans
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1423,10 +1425,10 @@ cdef class pAdicConvert_FM_frac_field(Morphism):
             a + O(3^20)
             sage: g(a) == f(a)
             True
-
         """
+        _slots = Morphism._extra_slots(self)
         _slots['_zero'] = self._zero
-        return Morphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/rings/padics/FP_template.pxi b/src/sage/rings/padics/FP_template.pxi
index 75eb345a6c..5d9df20d53 100644
--- a/src/sage/rings/padics/FP_template.pxi
+++ b/src/sage/rings/padics/FP_template.pxi
@@ -1167,7 +1167,7 @@ cdef class pAdicCoercion_ZZ_FP(RingHomomorphism):
         self._zero = R.element_class(R, 0)
         self._section = pAdicConvert_FP_ZZ(R)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1182,9 +1182,10 @@ cdef class pAdicCoercion_ZZ_FP(RingHomomorphism):
             sage: g(6) == f(6)
             True
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1378,7 +1379,7 @@ cdef class pAdicCoercion_QQ_FP(RingHomomorphism):
         self._zero = R.element_class(R, 0)
         self._section = pAdicConvert_FP_QQ(R)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1399,9 +1400,10 @@ cdef class pAdicCoercion_QQ_FP(RingHomomorphism):
             sage: g(6) == f(6)
             True
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1580,7 +1582,7 @@ cdef class pAdicConvert_QQ_FP(Morphism):
         Morphism.__init__(self, Hom(QQ, R, SetsWithPartialMaps()))
         self._zero = R.element_class(R, 0)
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -1595,8 +1597,9 @@ cdef class pAdicConvert_QQ_FP(Morphism):
             sage: g(1/6) == f(1/6)
             True
         """
+        _slots = Morphism._extra_slots(self)
         _slots['_zero'] = self._zero
-        return Morphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -1801,7 +1804,7 @@ cdef class pAdicCoercion_FP_frac_field(RingHomomorphism):
         """
         return self._section
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         r"""
         Helper for copying and pickling.
 
@@ -1823,11 +1826,11 @@ cdef class pAdicCoercion_FP_frac_field(RingHomomorphism):
             a
             sage: g(a) == f(a)
             True
-
         """
+        _slots = RingHomomorphism._extra_slots(self)
         _slots['_zero'] = self._zero
         _slots['_section'] = self.section() # use method since it copies coercion-internal sections.
-        return RingHomomorphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         r"""
@@ -1954,7 +1957,7 @@ cdef class pAdicConvert_FP_frac_field(Morphism):
             cshift(ans.unit, x.unit, 0, rprec, x.prime_pow, reduce)
         return ans
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         r"""
         Helper for copying and pickling.
 
@@ -1977,10 +1980,10 @@ cdef class pAdicConvert_FP_frac_field(Morphism):
             a
             sage: g(a) == f(a)
             True
-
         """
+        _slots = Morphism._extra_slots(self)
         _slots['_zero'] = self._zero
-        return Morphism._extra_slots(self, _slots)
+        return _slots
 
     cdef _update_slots(self, dict _slots):
         r"""
diff --git a/src/sage/rings/polynomial/polynomial_element.pyx b/src/sage/rings/polynomial/polynomial_element.pyx
index d012a88f84..fc0f23dc01 100644
--- a/src/sage/rings/polynomial/polynomial_element.pyx
+++ b/src/sage/rings/polynomial/polynomial_element.pyx
@@ -11064,7 +11064,7 @@ cdef class PolynomialBaseringInjection(Morphism):
         self._repr_type_str = "Polynomial base injection"
         self._new_constant_poly_ = self._an_element._new_constant_poly
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         EXAMPLES::
 
@@ -11076,9 +11076,11 @@ cdef class PolynomialBaseringInjection(Morphism):
             sage: phi(3/1)
             3
         """
-        _slots['_an_element'] = self._an_element
-        _slots['_new_constant_poly_'] = self._new_constant_poly_
-        return Morphism._extra_slots(self, _slots)
+        slots = Morphism._extra_slots(self)
+        slots.update(
+                _an_element=self._an_element,
+                _new_constant_poly_=self._new_constant_poly_)
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
diff --git a/src/sage/structure/coerce_maps.pyx b/src/sage/structure/coerce_maps.pyx
index 88a8f0eb5f..911a1dc46f 100644
--- a/src/sage/structure/coerce_maps.pyx
+++ b/src/sage/structure/coerce_maps.pyx
@@ -74,9 +74,10 @@ cdef class DefaultConvertMap(Map):
         """
         return self._repr_type_str or ("Coercion" if self._is_coercion else "Conversion")
 
-    cdef dict _extra_slots(self, dict _slots):
-        _slots['_force_use'] = self._force_use
-        return Map._extra_slots(self, _slots)
+    cdef dict _extra_slots(self):
+        slots = Map._extra_slots(self)
+        slots['_force_use'] = self._force_use
+        return slots
 
     cdef _update_slots(self, dict _slots):
         self._force_use = _slots['_force_use']
@@ -203,7 +204,7 @@ cdef class NamedConvertMap(Map):
         self.method_name = method_name
         self._repr_type_str = "Conversion via %s method" % self.method_name
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -225,9 +226,10 @@ cdef class NamedConvertMap(Map):
             sage: psi(t^2/4+1) == phi(t^2/4+1)
             True
         """
-        _slots['method_name'] = self.method_name
-        _slots['_force_use'] = self._force_use
-        return Map._extra_slots(self, _slots)
+        slots = Map._extra_slots(self)
+        slots['method_name'] = method_name=self.method_name
+        slots['_force_use'] = self._force_use
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -358,7 +360,7 @@ cdef class CallableConvertMap(Map):
         except AttributeError:
             self._repr_type_str = "Conversion via %s" % self._func
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -373,9 +375,10 @@ cdef class CallableConvertMap(Map):
             sage: f(3) == g(3)
             True
         """
-        _slots['_parent_as_first_arg'] = self._parent_as_first_arg
-        _slots['_func'] = self._func
-        return Map._extra_slots(self, _slots)
+        slots = Map._extra_slots(self)
+        slots['_func'] = self._func
+        slots['_parent_as_first_arg'] = self._parent_as_first_arg
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
@@ -578,9 +581,10 @@ cdef class ListMorphism(Map):
         self._real_morphism = real_morphism
         self._repr_type_str = "List"
 
-    cdef dict _extra_slots(self, dict _slots):
-        _slots['_real_morphism'] = self._real_morphism
-        return Map._extra_slots(self, _slots)
+    cdef dict _extra_slots(self):
+        slots = Map._extra_slots(self)
+        slots['_real_morphism'] = self._real_morphism
+        return slots
 
     cdef _update_slots(self, dict _slots):
         self._real_morphism = _slots['_real_morphism']
@@ -622,7 +626,7 @@ cdef class TryMap(Map):
         else:
             self._error_types = error_types
 
-    cdef dict _extra_slots(self, dict _slots):
+    cdef dict _extra_slots(self):
         """
         Helper for copying and pickling.
 
@@ -639,10 +643,11 @@ cdef class TryMap(Map):
             sage: map(0) == cmap(0)
             True
         """
-        _slots['_map_p'] = self._map_p
-        _slots['_map_b'] = self._map_b
-        _slots['_error_types'] = self._error_types
-        return Map._extra_slots(self, _slots)
+        slots = Map._extra_slots(self)
+        slots['_map_p'] = self._map_p
+        slots['_map_b'] = self._map_b
+        slots['_error_types'] = self._error_types
+        return slots
 
     cdef _update_slots(self, dict _slots):
         """
-- 
2.16.2

