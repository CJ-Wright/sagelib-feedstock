From 998935ee29856a07344a48388daf033f16a05875 Mon Sep 17 00:00:00 2001
From: Jeroen Demeyer <jdemeyer@cage.ugent.be>
Date: Fri, 9 Feb 2018 11:43:34 +0100
Subject: [PATCH] Various Cython fixes

---
 src/sage/combinat/integer_lists/invlex.pyx                     | 5 +++--
 src/sage/misc/lazy_string.pyx                                  | 5 ++---
 src/sage/rings/number_field/number_field_element_quadratic.pyx | 2 --
 src/sage/sets/recursively_enumerated_set.pyx                   | 4 ++--
 src/sage/structure/sage_object.pyx                             | 4 ++--
 5 files changed, 9 insertions(+), 11 deletions(-)

diff --git a/src/sage/combinat/integer_lists/invlex.pyx b/src/sage/combinat/integer_lists/invlex.pyx
index dd8200670c..a3c9599b26 100644
--- a/src/sage/combinat/integer_lists/invlex.pyx
+++ b/src/sage/combinat/integer_lists/invlex.pyx
@@ -27,9 +27,10 @@ limitations and lack of robustness w.r.t. input.
 # (at your option) any later version.
 #                  http://www.gnu.org/licenses/
 #*****************************************************************************
+
 from __future__ import print_function, absolute_import
 
-from builtins import object
+import builtins
 
 from sage.misc.classcall_metaclass import ClasscallMetaclass, typecall
 from sage.misc.cachefunc import cached_method
@@ -1088,7 +1089,7 @@ DECREASE  = 2
 POP       = 1
 STOP      = 0
 
-class IntegerListsLexIter(object):
+class IntegerListsLexIter(builtins.object):
     r"""
     Iterator class for IntegerListsLex.
 
diff --git a/src/sage/misc/lazy_string.pyx b/src/sage/misc/lazy_string.pyx
index cd849d89e8..1d2ef92727 100644
--- a/src/sage/misc/lazy_string.pyx
+++ b/src/sage/misc/lazy_string.pyx
@@ -405,7 +405,7 @@ cdef class _LazyString(object):
         else:
             return self * (<_LazyString>other).val()
 
-    def __richcmp__(self, other, int op):
+    def __richcmp__(_LazyString self, other, int op):
         """
         EXAMPLES::
 
@@ -449,8 +449,7 @@ cdef class _LazyString(object):
             sage: s >= s
             True
         """
-        self = (<_LazyString?>self).val()
-        return PyObject_RichCompare(self, other, op)
+        return PyObject_RichCompare(self.val(), other, op)
 
     def __getattr__(self, name):
         """
diff --git a/src/sage/rings/number_field/number_field_element_quadratic.pyx b/src/sage/rings/number_field/number_field_element_quadratic.pyx
index d2f90afe1e..551c8e52cf 100644
--- a/src/sage/rings/number_field/number_field_element_quadratic.pyx
+++ b/src/sage/rings/number_field/number_field_element_quadratic.pyx
@@ -1105,8 +1105,6 @@ cdef class NumberFieldElement_quadratic(NumberFieldElement_absolute):
             sage: K(123/567).continued_fraction_list()
             ((0, 4, 1, 1, 1, 1, 3, 2), ())
         """
-        cdef NumberFieldElement_quadratic x
-
         if mpz_sgn(self.b) == 0:
             return tuple(Rational(self).continued_fraction_list()),()
 
diff --git a/src/sage/sets/recursively_enumerated_set.pyx b/src/sage/sets/recursively_enumerated_set.pyx
index 27facd9fc1..19bb20ca9a 100644
--- a/src/sage/sets/recursively_enumerated_set.pyx
+++ b/src/sage/sets/recursively_enumerated_set.pyx
@@ -447,9 +447,9 @@ cdef class RecursivelyEnumeratedSet_generic(Parent):
             sage: len(C)
             Traceback (most recent call last):
             ...
-            TypeError: 'NoneType' object cannot be interpreted as an index
+            TypeError: cannot compute length of A recursively enumerated set (breadth first search)
         """
-        return None
+        raise TypeError(f"cannot compute length of {self}")
 
     def __iter__(self):
         r"""
diff --git a/src/sage/structure/sage_object.pyx b/src/sage/structure/sage_object.pyx
index 8eeeaaf7bf..6a93a1330c 100644
--- a/src/sage/structure/sage_object.pyx
+++ b/src/sage/structure/sage_object.pyx
@@ -1599,9 +1599,9 @@ def unpickle_all(dir, debug=False, run_test_suite=False):
     for A in sorted(os.listdir(dir)):
         if A.endswith('.sobj'):
             try:
-                object = load(os.path.join(dir,A))
+                obj = load(os.path.join(dir,A))
                 if run_test_suite:
-                    TestSuite(object).run(catch = False)
+                    TestSuite(obj).run(catch = False)
                 i += 1
             except Exception:
                 j += 1
-- 
2.16.2

