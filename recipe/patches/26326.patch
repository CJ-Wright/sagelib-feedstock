Backport of https://trac.sagemath.org/ticket/26326 to make Sage work with NetworkX 2.2
--- a/build/pkgs/networkx/checksums.ini
+++ b/build/pkgs/networkx/checksums.ini
@@ -1,4 +1,4 @@
 tarball=networkx-VERSION.zip
-sha1=a481bea7b41c0d6af191c7d2bcde56d75da20b3e
-md5=4a2c2a62dfc46ba7d594daca7c834995
-cksum=1070647523
+sha1=a68f8faa3726c220b93d68cfa28bed24874ba3fc
+md5=82608a3686fb3e61f20cf13bfd3c1b4a
+cksum=539980282
--- a/build/pkgs/networkx/package-version.txt
+++ b/build/pkgs/networkx/package-version.txt
@@ -1 +1 @@
-2.1
+2.2
--- /dev/null
+++ b/build/pkgs/networkx/spkg-check
@@ -0,0 +1,22 @@
+if [ -z "$SAGE_LOCAL" ]; then
+    echo >&2 "SAGE_LOCAL undefined ... exiting"
+    echo >&2 "Maybe run 'sage --sh'?"
+    exit 1
+fi
+
+cd src
+
+if ! command -v nosetests ; then 
+    echo >&2 'Testing networkx requires the package nose to be installed'
+    exit 1
+fi
+
+echo "Testing networkx..."
+
+nosetests networkx -v
+
+if [ $? -ne 0 ]; then
+    echo >&2 "Error running self tests."
+    exit 1
+fi
+
--- a/src/sage/graphs/digraph_generators.py
+++ b/src/sage/graphs/digraph_generators.py
@@ -1117,7 +1117,7 @@
 
         -  ``kernel`` - the attachment kernel
 
-        -  ``seed`` - for the random number generator
+        -  ``seed`` - a ``random.Random`` seed for the random number generator
 
 
         EXAMPLES::
@@ -1133,7 +1133,7 @@
           Random Networks, Phys. Rev. E vol. 63 (2001), p. 066123.
         """
         if seed is None:
-            seed = current_randstate().long_seed()
+            seed = current_randstate().python_random()
         import networkx
         return DiGraph(networkx.gn_graph(n, kernel, seed=seed))
 
@@ -1153,7 +1153,7 @@
 
         -  ``n`` - number of vertices.
 
-        -  ``seed`` - for the random number generator
+        -  ``seed`` - a ``random.Random`` seed for the random number generator
 
 
         EXAMPLES::
@@ -1169,7 +1169,7 @@
           Copying, Phys. Rev. E vol. 71 (2005), p. 036118.
         """
         if seed is None:
-            seed = current_randstate().long_seed()
+            seed = current_randstate().python_random()
         import networkx
         return DiGraph(networkx.gnc_graph(n, seed=seed))
 
@@ -1364,7 +1364,7 @@
 
         -  ``p`` - redirection probability
 
-        -  ``seed`` - for the random number generator.
+        -  ``seed`` - a ``random.Random`` seed for the random number generator.
 
 
         EXAMPLES::
@@ -1380,7 +1380,7 @@
           Random Networks, Phys. Rev. E vol. 63 (2001), p. 066123.
         """
         if seed is None:
-            seed = current_randstate().long_seed()
+            seed = current_randstate().python_random()
         import networkx
         return DiGraph(networkx.gnc_graph(n, seed=seed))
 
--- a/src/sage/graphs/generators/random.py
+++ b/src/sage/graphs/generators/random.py
@@ -30,7 +30,7 @@
 
     - ``p`` -- probability of an edge
 
-    - ``seed`` -- integer seed for random number generator (default ``None``).
+    - ``seed`` -- a ``random.Random`` seed for random number generator (default ``None``).
 
     - ``fast`` -- boolean set to True (default) to use the algorithm with
       time complexity in `O(n+m)` proposed in [BatBra2005]_. It is designed
@@ -106,7 +106,7 @@
         raise ValueError("The probability p must be in [0..1].")
 
     if seed is None:
-        seed = current_randstate().long_seed()
+        seed = current_randstate().python_random()
     if p == 1:
         from sage.graphs.generators.basic import CompleteGraph
         return CompleteGraph(n)
@@ -140,7 +140,7 @@
 
     - ``m`` - number of edges to attach from each new node
 
-    - ``seed`` -- integer seed for random number generator (default ``None``).
+    - ``seed`` -- a ``random.Random`` seed for random number generator (default ``None``).
 
     EXAMPLES:
 
@@ -175,7 +175,7 @@
 
     """
     if seed is None:
-        seed = current_randstate().long_seed()
+        seed = current_randstate().python_random()
     import networkx
     return Graph(networkx.barabasi_albert_graph(n,m,seed=seed))
 
@@ -454,7 +454,7 @@
     - ``dense`` - whether to use NetworkX's
       dense_gnm_random_graph or gnm_random_graph
 
-    - ``seed`` -- integer seed for random number generator (default ``None``).
+    - ``seed`` -- a ``random.Random`` seed for random number generator (default ``None``).
 
     EXAMPLES: We show the edge list of a random graph on 5 nodes with
     10 edges.
@@ -487,7 +487,7 @@
         sage: G.show()  # long time
     """
     if seed is None:
-        seed = current_randstate().long_seed()
+        seed = current_randstate().python_random()
     import networkx
     if dense:
         return Graph(networkx.dense_gnm_random_graph(n, m, seed=seed))
@@ -517,7 +517,7 @@
     - ``p`` - the probability of adding a new edge for
       each edge
 
-    - ``seed`` -- integer seed for random number generator (default ``None``).
+    - ``seed`` -- a ``random.Random`` seed for random number generator (default ``None``).
 
     EXAMPLES: We show the edge list of a random graph on 7 nodes with 2
     "nearest neighbors" and probability `p = 0.2`::
@@ -537,7 +537,7 @@
       99, 2566-2572.
     """
     if seed is None:
-        seed = current_randstate().long_seed()
+        seed = current_randstate().python_random()
     import networkx
     return Graph(networkx.newman_watts_strogatz_graph(n, k, p, seed=seed))
 
@@ -557,7 +557,7 @@
     - ``p`` - probability of adding a triangle after
       adding a random edge.
 
-    - ``seed`` -- integer seed for random number generator (default ``None``).
+    - ``seed`` -- a ``random.Random`` seed for random number generator (default ``None``).
 
     From the NetworkX documentation: The average clustering has a hard
     time getting above a certain cutoff that depends on m. This cutoff
@@ -593,7 +593,7 @@
       with tunable clustering, Phys. Rev. E (2002). vol 65, no 2, 026107.
     """
     if seed is None:
-        seed = current_randstate().long_seed()
+        seed = current_randstate().python_random()
     import networkx
     return Graph(networkx.powerlaw_cluster_graph(n, m, p, seed=seed))
 
@@ -667,7 +667,7 @@
     - ``q`` - probability of adding an edge (claw) to the
       arms
 
-    - ``seed`` -- integer seed for random number generator (default ``None``).
+    - ``seed`` -- a ``random.Random`` seed for random number generator (default ``None``).
 
     EXAMPLES: We show the edge list of a random graph with 3 backbone
     nodes and probabilities `p = 0.7` and `q = 0.3`::
@@ -681,7 +681,7 @@
         sage: G.show()  # long time
     """
     if seed is None:
-        seed = current_randstate().long_seed()
+        seed = current_randstate().python_random()
     import networkx
     return Graph(networkx.random_lobster(n, p, q, seed=seed))
 
@@ -772,7 +772,7 @@
     - ``tries`` - number of attempts to adjust sequence to
       make a tree
 
-    - ``seed`` -- integer seed for random number generator (default ``None``).
+    - ``seed`` -- a ``random.Random`` seed for random number generator (default ``None``).
 
     EXAMPLES: We show the edge list of a random graph with 10 nodes and
     a power law exponent of 2.
@@ -789,7 +789,7 @@
         ....:     G.show()  # random output, long time
     """
     if seed is None:
-        seed = current_randstate().long_seed()
+        seed = current_randstate().python_random()
     import networkx
     try:
         return Graph(networkx.random_powerlaw_tree(n, gamma, seed=seed, tries=tries))
@@ -810,7 +810,7 @@
 
     - ``d`` - degree
 
-    - ``seed`` -- integer seed for random number generator (default ``None``).
+    - ``seed`` -- a ``random.Random`` seed for random number generator (default ``None``).
 
 
     EXAMPLES: We show the edge list of a random graph with 8 nodes each
@@ -838,7 +838,7 @@
       regular graphs quickly. Prob. and Comp. 8 (1999), pp 377-396.
     """
     if seed is None:
-        seed = current_randstate().long_seed()
+        seed = current_randstate().python_random()
     import networkx
     try:
         N = networkx.random_regular_graph(d, n, seed=seed)
@@ -863,7 +863,7 @@
     - ``d`` - the ratio of inter (next) shell edges to
       intra shell edges
 
-    - ``seed`` -- integer seed for random number generator (default ``None``).
+    - ``seed`` -- a ``random.Random`` seed for random number generator (default ``None``).
 
     EXAMPLES::
 
@@ -873,7 +873,7 @@
         sage: G.show()  # long time
     """
     if seed is None:
-        seed = current_randstate().long_seed()
+        seed = current_randstate().python_random()
     import networkx
     return Graph(networkx.random_shell_graph(constructor, seed=seed))
 
